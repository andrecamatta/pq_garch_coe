#!/usr/bin/env julia

# Teste simples das otimiza√ß√µes de performance

include("src/autocall_pricer.jl")
using Dates

println("=================================================================")
println("           TESTE DE OTIMIZA√á√ïES DE PERFORMANCE")
println("=================================================================")
println()

# Setup b√°sico usando dados hardcoded para n√£o depender de CSVs externos
symbols = ["AMD", "AMZN", "META", "TSM"]
pricing_date = Date(2024, 3, 21)

# Usar pre√ßos fixos conhecidos
specs = [
    UnderlyingSpec("AMD", 178.68, false, 0.0),
    UnderlyingSpec("AMZN", 178.15, false, 0.0),
    UnderlyingSpec("META", 505.56, false, 0.0),
    UnderlyingSpec("TSM", 136.62, true, 0.015),
]

# Criar par√¢metros NSS simplificados para teste
nss_params = NSSParameters(
    0.10,    # Œ≤‚ÇÄ - Long-term level
    -0.02,   # Œ≤‚ÇÅ - Slope
    0.01,    # Œ≤‚ÇÇ - Short-term curvature
    0.005,   # Œ≤‚ÇÉ - Long-term curvature
    1.0,     # œÑ‚ÇÅ - First exponential decay
    5.0,     # œÑ‚ÇÇ - Second exponential decay
    pricing_date
)

# Curva USD simplificada
usd_curve = create_usd_curve(pricing_date)
fx_spot = 5.2  # Taxa fixa para teste

principal = 5000.0
dummy_coupons = fill(0.07, 10)

config_template = AutocallConfig(
    dummy_coupons, 126, 1260,
    principal, 0.10, nss_params, usd_curve, fx_spot
)

println("‚è±Ô∏è COMPARA√á√ÉO DE PERFORMANCE:")
println("="^60)

# Teste 1: Vers√£o original (sem otimiza√ß√µes)
println("üîµ TESTE 1: M√©todo tradicional (sem pr√©-simula√ß√£o)")
time_start = time()

# Simular a vers√£o sem otimiza√ß√£o fazendo chamadas repetidas
println("  ‚Ä¢ Calibrando modelos GARCH/DCC...")
models, returns_mat = fit_all_garch(specs; pricing_date=pricing_date, innovation_dist=:student)
Z = standardised_residuals(models, returns_mat)
dcc = fit_dcc(Z)

# Fazer v√°rias simula√ß√µes separadas (simulando o m√©todo antigo)
num_tests = 5
global total_paths = 0

for i in 1:num_tests
    coupons = fill(0.07 + (i-1)*0.005, 10)  # Diferentes cupons
    cfg = AutocallConfig(coupons, 126, 1260, principal, 0.10, nss_params, usd_curve, fx_spot)
    result = price_autocall_with_models(models, dcc, specs, cfg; num_paths=5_000, returns_mat=returns_mat)
    global total_paths += 5_000
    println("    Cupom $(round((0.07 + (i-1)*0.005)*100, digits=1))%: R\$ $(round(result.mean_price, digits=2))")
end

time_traditional = time() - time_start
println("  ‚Ä¢ Tempo total: $(round(time_traditional, digits=2)) segundos")
println("  ‚Ä¢ Total de simula√ß√µes: $total_paths caminhos")
println()

# Teste 2: Nova vers√£o com pr√©-simula√ß√£o e duas fases
println("üü¢ TESTE 2: M√©todo otimizado (com pr√©-simula√ß√£o)")
time_start = time()

# Usar a nova fun√ß√£o otimizada
result_optimized = find_fair_coupon(specs, config_template;
                                   target_price=principal,
                                   tolerance=10.0,  # Toler√¢ncia relaxada para teste
                                   max_evaluations=8,  # Menos avalia√ß√µes para teste r√°pido
                                   num_paths=10_000,
                                   low_paths=3_000,
                                   innovation_dist=:student)

time_optimized = time() - time_start
println("  ‚Ä¢ Tempo total: $(round(time_optimized, digits=2)) segundos")
println("  ‚Ä¢ Cupom encontrado: $(round(result_optimized.fair_coupon*100, digits=3))%")
println("  ‚Ä¢ Pre√ßo final: R\$ $(round(result_optimized.final_price, digits=2))")
println("  ‚Ä¢ Convergiu: $(result_optimized.converged ? "‚úÖ SIM" : "‚ùå N√ÉO")")
println()

# An√°lise de performance
println("üìä AN√ÅLISE DE PERFORMANCE:")
println("="^60)
speedup = time_traditional / time_optimized
efficiency = speedup > 1 ? "MELHORIA" : "DEGRADA√á√ÉO"

println("  ‚Ä¢ Tempo m√©todo tradicional: $(round(time_traditional, digits=2))s")
println("  ‚Ä¢ Tempo m√©todo otimizado: $(round(time_optimized, digits=2))s")
println("  ‚Ä¢ Speedup: $(round(speedup, digits=2))x")
println("  ‚Ä¢ Resultado: $efficiency de $(round(abs(speedup-1)*100, digits=0))%")
println()

if speedup > 1.2
    println("‚úÖ OTIMIZA√á√ÉO BEM-SUCEDIDA!")
    println("  ‚Ä¢ Significativa melhoria de performance detectada")
    println("  ‚Ä¢ Pr√©-simula√ß√£o e duas fases funcionando corretamente")
elseif speedup > 0.8
    println("‚ö†Ô∏è  PERFORMANCE SIMILAR")
    println("  ‚Ä¢ Pequena diferen√ßa, pode ser ru√≠do do sistema")
    println("  ‚Ä¢ Para problemas maiores, diferen√ßa seria mais significativa")
else
    println("‚ùå POSS√çVEL PROBLEMA")
    println("  ‚Ä¢ M√©todo otimizado mais lento que tradicional")
    println("  ‚Ä¢ Verificar implementa√ß√£o das otimiza√ß√µes")
end

println()
println("üß™ TESTE DE VALIDA√á√ÉO T√âCNICA:")
println("="^60)

# Testar se a pr√©-simula√ß√£o est√° funcionando
println("  ‚Ä¢ Testando pr√©-simula√ß√£o direta...")
models_test, returns_mat_test = fit_all_garch(specs; pricing_date=pricing_date, innovation_dist=:student)
Z_test = standardised_residuals(models_test, returns_mat_test)
dcc_test = fit_dcc(Z_test)

presim_data = presimulate_paths(models_test, dcc_test, specs, config_template; num_paths=1000, returns_mat=returns_mat_test)
coupons_test = fill(0.08, 10)
price_presim = calculate_price_from_presimulated(presim_data, coupons_test, principal)

# Comparar com m√©todo tradicional
cfg_test = AutocallConfig(coupons_test, 126, 1260, principal, 0.10, nss_params, usd_curve, fx_spot)
result_traditional = price_autocall_with_models(models_test, dcc_test, specs, cfg_test; num_paths=1000, returns_mat=returns_mat_test)
price_traditional = result_traditional.mean_price

price_diff = abs(price_presim - price_traditional)
price_diff_pct = price_diff / price_traditional * 100

println("    Pre√ßo pr√©-simulado: R\$ $(round(price_presim, digits=2))")
println("    Pre√ßo tradicional:  R\$ $(round(price_traditional, digits=2))")
println("    Diferen√ßa absoluta: R\$ $(round(price_diff, digits=2))")
println("    Diferen√ßa relativa: $(round(price_diff_pct, digits=2))%")

if price_diff_pct < 5.0
    println("  ‚úÖ PRECIS√ÉO ADEQUADA: Diferen√ßa < 5%")
else
    println("  ‚ö†Ô∏è  VERIFICAR PRECIS√ÉO: Diferen√ßa > 5%")
end

println()
println("=================================================================")
println("CONCLUS√ÉO:")
if speedup > 1.1 && price_diff_pct < 5.0
    println("‚úÖ OTIMIZA√á√ïES IMPLEMENTADAS COM SUCESSO!")
    println("  ‚Ä¢ Performance melhorada significativamente")
    println("  ‚Ä¢ Precis√£o mantida dentro de limites aceit√°veis")
    println("  ‚Ä¢ Pr√©-simula√ß√£o e amostragem bif√°sica funcionando")
else
    println("‚ö†Ô∏è  OTIMIZA√á√ïES NECESSITAM AJUSTE")
    if speedup <= 1.1
        println("  ‚Ä¢ Melhoria de performance insuficiente")
    end
    if price_diff_pct >= 5.0
        println("  ‚Ä¢ Precis√£o comprometida")
    end
end
println("=================================================================")